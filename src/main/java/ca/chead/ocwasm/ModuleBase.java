package ca.chead.ocwasm;

import java.nio.ByteBuffer;

/**
 * The base class of all Wasm modules used in OC-Wasm.
 */
public abstract class ModuleBase {
	/**
	 * The number of bytes per unit of {@link #freeMemory}.
	 */
	public static final int FREE_MEMORY_UNIT = 4;

	/**
	 * Whether or not the current timeslice has timed out and execution should
	 * be aborted.
	 *
	 * This variable is written by two threads: it is set to {@code false} in
	 * {@link ca.chead.ocwasm.state.Run#runThreaded} on the computer thread,
	 * then potentially set to {@code true} in the timeout future on the
	 * background executor thread. See the comment in that method for how
	 * proper ordering of writes is guaranteed, to avoid races.
	 *
	 * During module execution, this variable is potentially set to {@code
	 * true} in the timeout future on the background executor thread while
	 * being read in the generated bytecode on the computer thread. It is
	 * {@code volatile} to ensure that the write will be observed promptly.
	 */
	// Making this into a method would be bad. As a field, it does not affect
	// subclasses at all. As a method, it would either be final (which would
	// arbitrarily restrict subclasses from having a method with the same name
	// and parameters) or nonfinal (which would allow subclasses to override
	// it).
	@SuppressWarnings("checkstyle:VisibilityModifier")
	public volatile boolean timedOut;

	/**
	 * The current amount of RAM that is free, in {@link
	 * #FREE_MEMORY_UNIT}-byte units.
	 *
	 * This variable is only touched by the computer thread.
	 */
	// Making this into a method would be bad. As a field, it does not affect
	// subclasses at all. As a method, it would either be final (which would
	// arbitrarily restrict subclasses from having a method with the same name
	// and parameters) or nonfinal (which would allow subclasses to override
	// it).
	@SuppressWarnings("checkstyle:VisibilityModifier")
	public int freeMemory;

	/**
	 * Runs the module.
	 * <p>
	 * Normally this is called once at startup and then again each time the
	 * previous call’s requested sleep time completes. However, it may be
	 * called earlier than the requested sleep time under three conditions:
	 * <ul>
	 * <li>If an indirect method call is started, this will be called again
	 * immediately after the method call completes, with no other intervening
	 * calls.</li>
	 * <li>If a signal is received during the sleep, or is present when the
	 * previous invocation returns, this will be called immediately,
	 * interrupting the requested sleep.</li>
	 * <li>Potentially, if the computer is saved and reloaded (either due to
	 * the server shutting down or due to the chunk being unloaded) during the
	 * sleep.</li>
	 * </ul>
	 *
	 * Therefore, a module that actually needs to sleep for a specific amount
	 * of time should use either {@link
	 * ca.chead.ocwasm.syscall.Computer#uptime} or {@link
	 * ca.chead.ocwasm.syscall.Computer#worldTime} to calculate sleep periods,
	 * depending on how it wishes to handle players using beds to skip time.
	 *
	 * @param callCompleted 1 if a method call was previously started but not
	 * finished and has now finished, or 0 if not.
	 * @return The number of ticks to sleep before the next call.
	 * @throws ExecutionException If a stack overflow occurs, the computer’s
	 * timeslice expires, or the module requests to shut down the computer.
	 * @throws WrappedException If a syscall invoked by the Wasm module
	 * instance failed for a reason that was not the module instance’s fault.
	 */
	public abstract int run(int callCompleted) throws ExecutionException, WrappedException;

	/**
	 * Writes the contents of all mutable globals to a {@link ByteBuffer}.
	 *
	 * This method is automatically implemented by the compilation process. It
	 * must not be implemented in the Wasm module itself.
	 *
	 * @param buffer The ByteBuffer into which to write the mutable globals.
	 */
	public abstract void saveMutableGlobals(ByteBuffer buffer);

	/**
	 * Constructs a new {@code ModuleBase}.
	 *
	 * @param listener The listener that wishes to be notified of the module’s
	 * partial construction.
	 */
	protected ModuleBase(final ModuleConstructionListener listener) {
		super();
		timedOut = false;
		freeMemory = 0;
		listener.instanceConstructed(this);
	}
}
